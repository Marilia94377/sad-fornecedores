# ===================================
# üì¶ Importa√ß√£o de Bibliotecas
# ===================================
import streamlit as st
import pandas as pd
import plotly.express as px
import math
import numpy as np

#quando feito colocar no terminal: pip install streamlit pandas plotly
# streamlit run app_up_5.py

# ===================================
# üé® Estilo Visual
# ===================================
st.set_page_config(page_title="SAD PROMETHEE II", layout="wide")

st.markdown("""
    <style>
    .main {
        background-color: white;
        color: black;
    }
    h1 {
        font-size: 24px;
        color: #42434A;
    }
    h2, h3, h4, h5, h6, p {
        color: black;
    }
    .gray-background {
        background-color: #f0f0f0;
        padding: 12px;
        border-radius: 20px;
        border: 1px solid #d9d9d9;
    }
    div.stButton > button {
        color: white;
        background-color: #4CAF50;
        border: none;
        padding: 10px 20px;
        text-align: center;
        font-size: 16px;
        margin: 4px 2px;
        border-radius: 8px;
        cursor: pointer;
    }
    .button-voltar {
        color: white;
        background-color: #FF6347;
        border: none;
        padding: 10px 20px;
        text-align: center;
        font-size: 16px;
        margin: 4px 2px;
        border-radius: 8px;
        cursor: pointer;
    }
    .spacer {
        margin-top: 20px;
    }
    .stDataFrame {
        width: 100%;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# ===================================
# üß† Descri√ß√£o dos Crit√©rios e Escalas Qualitativas
# ===================================
descricao_criterios = {
    'C1 - Pre√ßo': 'Valor monet√°rio em reais. (‚Üì)',
    'C2 - Qualidade': 'Avalia√ß√£o subjetiva da qualidade com base em padr√µes de refer√™ncia. (‚Üë)',
    'C3 - Entrega': 'Prazo de entrega em dias. (‚Üì)',
    'C4 - Tecnologia': 'N√≠vel de inova√ß√£o e ado√ß√£o de tecnologias avan√ßadas. (‚Üë)',
    'C5 - Custos ambientais': 'Custos ambientais em reais, como multas ou tratamentos. (‚Üì)',
    'C6 - Projeto verde': 'Grau de ado√ß√£o de pr√°ticas sustent√°veis no projeto. (‚Üë)',
    'C7 - Gest√£o ambiental': 'Efetividade do sistema de gest√£o ambiental. (‚Üë)',
    'C8 - Partes interessadas': 'Comprometimento com direitos e atendimento das partes interessadas. (‚Üë)',
    'C9 - Seguran√ßa e sa√∫de no trabalho': 'Taxa de acidentes ou incidentes ocupacionais. (‚Üì)',
    'C10 - Respeito pela pol√≠tica dos funcion√°rios': 'Cumprimento das pol√≠ticas e direitos dos funcion√°rios. (‚Üë)',
    'C11 - Gest√£o social': 'Capacidade de implementar pr√°ticas de gest√£o social sustent√°vel. (‚Üë)',
    'C12 - Hist√≥rico de desempenho': 'N√∫mero de anos em opera√ß√£o. (‚Üë)',
    'C13 - Reputa√ß√£o': 'An√°lise de m√≠dia, avalia√ß√µes e reconhecimentos. (‚Üë)',
    'C14 - Log√≠stica': 'Dist√¢ncia em quil√¥metros. (‚Üì)'
}

escala_qualitativa = {
    'C2 - Qualidade': """| Nota | Descri√ß√£o |
|------|-----------|
| 1 | Produtos/servi√ßos n√£o atendem aos padr√µes de qualidade, resultando em retrabalho frequente e feedback negativo. |
| 2 | Produtos/servi√ßos geralmente abaixo do padr√£o, com problemas ocasionais e feedback predominantemente negativo. |
| 3 | Produtos/servi√ßos atendem ao padr√£o m√≠nimo, com problemas ocasionais e feedback variado. |
| 4 | Produtos/servi√ßos atendem ou excedem padr√µes de qualidade, com feedback positivo e poucas rejei√ß√µes. |
| 5 | Produtos/servi√ßos excepcionais, superando consistentemente os padr√µes, com feedback altamente positivo e m√≠nimas rejei√ß√µes. |""",

    'C4 - Tecnologia': """| Nota | Descri√ß√£o |
|------|-----------|
| 1 | Pr√°ticas e tecnologias desatualizadas, sem inova√ß√£o ou certifica√ß√µes. |
| 2 | Investimento limitado em tecnologia, com melhorias inconsistentes e poucas certifica√ß√µes. |
| 3 | Alguma inova√ß√£o e tecnologias avan√ßadas em √°reas espec√≠ficas, mas n√£o abrangente. |
| 4 | Alinhado com as melhores pr√°ticas, com certifica√ß√µes, pr√™mios e parcerias relevantes. |
| 5 | L√≠der em inova√ß√£o, com certifica√ß√µes ISO, pr√™mios e parcerias estrat√©gicas. |""",

    'C6 - Projeto verde': """| Nota | Descri√ß√£o |
|------|-----------|
| 1 | Sem pr√°ticas sustent√°veis, ecoefici√™ncia, certifica√ß√µes ou uso de energias renov√°veis. |
| 2 | Esfor√ßos limitados em sustentabilidade, poucas certifica√ß√µes, uso espor√°dico de energias renov√°veis. |
| 3 | Algumas pr√°ticas sustent√°veis e certifica√ß√µes, uso moderado de energias renov√°veis. |
| 4 | Pr√°ticas ecoeficientes, certifica√ß√µes reconhecidas, uso consistente de energias renov√°veis e materiais sustent√°veis. |
| 5 | L√≠der em sustentabilidade, pr√°ticas altamente ecoeficientes, certifica√ß√µes destacadas, uso significativo de energias renov√°veis e materiais sustent√°veis. |""",

    'C7 - Gest√£o ambiental': """| Nota | Descri√ß√£o |
|------|-----------|
| 1 | Sem sistema de gest√£o ambiental, n√£o conformidade com regulamenta√ß√µes, nenhuma documenta√ß√£o ou programas de treinamento. |
| 2 | Esfor√ßos limitados em gest√£o ambiental, conformidade parcial, pouca documenta√ß√£o e poucos programas de treinamento. |
| 3 | Capacidade moderada em gest√£o ambiental, conformidade parcial, documenta√ß√£o adequada, programas de treinamento limitados. |
| 4 | Sistema de gest√£o ambiental eficaz, conformidade com regulamenta√ß√µes, documenta√ß√£o abrangente, programas de treinamento dispon√≠veis. |
| 5 | L√≠der em gest√£o ambiental, total conformidade, excelente documenta√ß√£o, programas de treinamento exemplares. |""",

    'C8 - Partes interessadas': """| Nota | Descri√ß√£o |
|------|-----------|
| 1 | Sem comprometimento com direitos das partes interessadas, n√£o conformidade com normas, condi√ß√µes de trabalho e atendimento deficientes. |
| 2 | Comprometimento limitado, conformidade parcial com normas, condi√ß√µes de trabalho e atendimento inconsistentes. |
| 3 | Cumprimento parcial das normas, condi√ß√µes de trabalho e atendimento aceit√°veis, feedback misto. |
| 4 | Comprometimento s√≥lido, conformidade com normas, condi√ß√µes de trabalho e atendimento de alta qualidade, feedback positivo. |
| 5 | Comprometimento exemplar, alinhamento com melhores pr√°ticas, excelentes condi√ß√µes de trabalho e atendimento, feedback extremamente positivo. |""",

    'C10 - Respeito pela pol√≠tica dos funcion√°rios': """| Nota | Descri√ß√£o |
|------|-----------|
| 1 | Sem comprometimento com igualdade, diversidade e n√£o discrimina√ß√£o; aus√™ncia de pol√≠ticas e procedimentos. |
| 2 | Comprometimento m√≠nimo, pol√≠ticas limitadas e ineficazes, promo√ß√£o de diversidade e inclus√£o √© insuficiente. |
| 3 | Comprometimento parcial, pol√≠ticas e procedimentos adequados, alguns esfor√ßos na promo√ß√£o da diversidade e inclus√£o. |
| 4 | Comprometimento s√≥lido, pol√≠ticas alinhadas com melhores pr√°ticas, promo√ß√£o ativa da diversidade e inclus√£o, pol√≠ticas e procedimentos eficazes. |
| 5 | Comprometimento exemplar, pol√≠ticas abrangentes, promo√ß√£o fundamental da diversidade e inclus√£o, procedimentos robustos e igualdade de oportunidades clara. |""",

    'C11 - Gest√£o social': """| Nota | Descri√ß√£o |
|------|-----------|
| 1 | Aus√™ncia de pol√≠ticas de responsabilidade social corporativa (RSC), nenhum apoio √† comunidade ou desenvolvimento sustent√°vel. |
| 2 | Pol√≠ticas de RSC limitadas, poucas a√ß√µes concretas em apoio √† comunidade e desenvolvimento sustent√°vel, envolvimento m√≠nimo com organiza√ß√µes sem fins lucrativos. |
| 3 | Algumas pol√≠ticas de RSC e a√ß√µes em apoio √† comunidade, parcialmente desenvolvidas, envolvimento moderado com organiza√ß√µes sem fins lucrativos. |
| 4 | Pol√≠ticas s√≥lidas de RSC, envolvimento ativo em a√ß√µes de apoio √† comunidade e desenvolvimento sustent√°vel, colabora√ß√£o com organiza√ß√µes sem fins lucrativos. |
| 5 | Excel√™ncia em RSC, pol√≠ticas abrangentes e eficazes, significativo apoio √† comunidade, desenvolvimento sustent√°vel e filantropia, colabora√ß√£o destacada com organiza√ß√µes sem fins lucrativos. |""",

    'C13 - Reputa√ß√£o': """| Nota | Descri√ß√£o |
|------|-----------|
| 1 | Reportagens negativas frequentes na m√≠dia, avalia√ß√µes online predominantemente negativas (1-2 estrelas), problemas recorrentes de conformidade. |
| 2 | Reportagens negativas ocasionais, avalia√ß√µes abaixo da m√©dia (2-3 estrelas), quest√µes espor√°dicas de conformidade. |
| 3 | Raramente em m√≠dia, avalia√ß√µes medianas (3 estrelas), conformidade com normas b√°sicas sem grandes problemas. |
| 4 | Reportagens positivas frequentes, avalia√ß√µes acima da m√©dia (4 estrelas), conformidade com todas as normas relevantes, boas pr√°ticas reconhecidas. |
| 5 | Destaque positivo constante na m√≠dia, avalia√ß√µes muito altas (4-5 estrelas), conformidade exemplar, l√≠der em boas pr√°ticas. |"""
}


# ===================================
# üöÄ C√°lculo PROMETHEE II
# ===================================
def calcular_promethee_sem_normalizar(df, criterios, objetivo, pesos, funcoes, parametros):
    alternativas = df.index.tolist()
    n = len(alternativas)
    peso_total = sum(pesos.values())

    # Inicializar matrizes
    matriz_d = {crit: np.zeros((n, n)) for crit in criterios}
    matriz_pref = {crit: np.zeros((n, n)) for crit in criterios}
    matriz_agregada = np.zeros((n, n))

    # Passo 1 e 2: calcular d(a,b) e aplicar F_j(a,b)
    for c_idx, crit in enumerate(criterios):
        for i, a in enumerate(alternativas):
            for j, b in enumerate(alternativas):
                if i == j:
                    continue

                # Diferen√ßa direta dos valores (sem normalizar)
                d = df.loc[a, crit] - df.loc[b, crit]

                # Inverter se crit√©rio for de minimiza√ß√£o
                if objetivo[crit] == 'Minimizado':
                    d = -d

                matriz_d[crit][i][j] = d

                # Par√¢metros q, p, s
                q = parametros[crit].get('q', 0)
                p = parametros[crit].get('p', 0)
                s = parametros[crit].get('s', 1)
                func = funcoes[crit]

                # Aplicar F_j conforme tipo
                if func == 'Usual':
                    pref = 1 if d > 0 else 0
                elif func == 'Quase-crit√©rio':
                    pref = 1 if d > q else 0
                elif func == 'Limiar de prefer√™ncia':
                    if d <= 0:
                        pref = 0
                    elif d <= p:
                        pref = d / p
                    else:
                        pref = 1
                elif func == 'Pseudo-crit√©rio':
                    if d <= q:
                        pref = 0
                    elif d <= p:
                        pref = 0.5
                    else:
                        pref = 1
                elif func == '√Årea de indiferen√ßa':
                    if d <= q:
                        pref = 0
                    elif d <= p:
                        pref = (d - q) / (p - q)
                    else:
                        pref = 1
                elif func == 'Gaussiana':
                    pref = 1 - math.exp(-(d ** 2) / (2 * s ** 2)) if d > 0 else 0
                else:
                    pref = 0

                matriz_pref[crit][i][j] = pref
                matriz_agregada[i][j] += pesos[crit] * pref

    # Passo 3: matriz de prefer√™ncia agregada (dividir pelo peso total)
    matriz_agregada /= peso_total

    # Passo 4: c√°lculo dos fluxos
    fluxo_positivo = matriz_agregada.sum(axis=1) / (n - 1)
    fluxo_negativo = matriz_agregada.sum(axis=0) / (n - 1)
    fluxo_liquido = fluxo_positivo - fluxo_negativo

    # Ranking final
    resultado = pd.DataFrame({
        'Fornecedor': alternativas,
        'Fluxo Positivo (œï+)': fluxo_positivo,
        'Fluxo Negativo (œï-)': fluxo_negativo,
        'Fluxo L√≠quido (œï)': fluxo_liquido
    })
    resultado = resultado.sort_values('Fluxo L√≠quido (œï)', ascending=False)
    resultado['Ranking'] = range(1, len(resultado) + 1)

    return resultado, matriz_d, matriz_pref, matriz_agregada
    
# ===================================
# Tela Inicial
# ===================================
def tela_inicial():
    col1, col2 = st.columns([1, 2])
    with col1:
        st.image("./pmd.jpg", caption="Project Management Group", width=215)

    with col2:
        st.markdown("<div class='gray-background' ><h1>Sistema de Apoio √† Decis√£o para a Sele√ß√£o de Fornecedores Sustent√°veis em Projetos</h1></div>", unsafe_allow_html=True)

    st.write("""
    Bem-vindo ao Sistema de Apoio √† Decis√£o, criado para ajudar empresas na sele√ß√£o de fornecedores sustent√°veis, considerando crit√©rios econ√¥micos, sociais e ambientais.
    """)

    st.write("Este sistema foi desenvolvido no laborat√≥rio Project Management and Development - Research Group do Departamento de Engenharia de Produ√ß√£o da Universidade Federal de Pernambuco (UFPE).")

    st.write("""
    O crescente interesse por pr√°ticas empresariais sustent√°veis tem impulsionado a necessidade de ferramentas que auxiliem na sele√ß√£o de fornecedores, considerando crit√©rios que v√£o al√©m do custo e da qualidade. Este sistema foi desenvolvido para aplicar o modelo PROMETHEE II, permitindo uma an√°lise multicrit√©rio e compara√ß√µes estruturadas entre fornecedores.
    """)

    st.markdown("<div class='gray-background'><h5>Conhe√ßa quem est√° por tr√°s da idealiza√ß√£o desta solu√ß√£o inovadora: </h5></div>", unsafe_allow_html=True)

    st.markdown('<div class="spacer"></div>', unsafe_allow_html=True)

    dev1_col, dev2_col, dev3_col = st.columns(3)
    with dev1_col:
        st.image("./Luciana.jpg", width=200)
        st.markdown("<p style='color: black;'>Prof.¬™ Dr.¬™ Luciana Hazin Alencar - Orientadora</p>", unsafe_allow_html=True)
    with dev2_col:
        st.image("./marilia.jpg", width=200)
        st.markdown("<p style='color: black;'>Mestre Mar√≠lia Martins - Desenvolvedora do Modelo Te√≥rico</p>", unsafe_allow_html=True)
    with dev3_col:
        st.image("./maria.jpg", width=200)
        st.markdown("<p style='color: black;'>Maria Geyzianny - Desenvolvedora do Sistema</p>", unsafe_allow_html=True)

# ===================================
# Tela do Sistema PROMETHEE II
# ===================================
def tela_sistema():
    st.title("Aplica√ß√£o do Modelo - PROMETHEE II")
    
    # Explica√ß√£o das fun√ß√µes de prefer√™ncia
    with st.expander("‚ÑπÔ∏è Explica√ß√£o das Fun√ß√µes de Prefer√™ncia"):
        st.markdown("""
        **Tipos de Fun√ß√µes de Prefer√™ncia:**
        
        1. **Usual (Tipo 1)**: Prefer√™ncia estrita se diferen√ßa > 0. N√£o h√° par√¢metros.
        2. **Quase-crit√©rio (Tipo 2)**: Prefer√™ncia se diferen√ßa > q (limiar de indiferen√ßa)
        3. **Limiar de prefer√™ncia (Tipo 3)**: Prefer√™ncia linear entre 0 e p (limiar de prefer√™ncia)
        4. **Pseudo-crit√©rio (Tipo 4)**: Zona de indiferen√ßa (q) e prefer√™ncia linear at√© p
        5. **√Årea de indiferen√ßa (Tipo 5)**: Zona de indiferen√ßa (q) e zona de prefer√™ncia fraca (0.5) at√© p
        6. **Gaussiana (Tipo 6)**: Prefer√™ncia cresce suavemente conforme distribui√ß√£o normal (par√¢metro s)
        """)
    
    # Sele√ß√£o de fornecedores e crit√©rios
    fornecedores = ['Fornecedor A', 'Fornecedor B', 'Fornecedor C',
                    'Fornecedor D', 'Fornecedor E', 'Fornecedor F']
    criterios = list(descricao_criterios.keys())
    criterios_qualitativos = list(escala_qualitativa.keys())
    
    col1, col2 = st.columns(2)
    with col1:
        fornecedores_selecionados = st.multiselect(
            "Selecione os fornecedores:",
            fornecedores,
            default=fornecedores[:3]
        )
    
    with col2:
        criterios_selecionados = st.multiselect(
            "Selecione os crit√©rios:",
            criterios,
            default=criterios[:3]
        )
    
    if len(fornecedores_selecionados) < 2:
        st.warning("Selecione pelo menos dois fornecedores para prosseguir.")
        st.stop()
    
    if not criterios_selecionados:
        st.warning("Selecione ao menos um crit√©rio para prosseguir.")
        st.stop()
    
    # Configura√ß√£o dos crit√©rios
    st.subheader("Configura√ß√£o dos Crit√©rios")
    
    pesos = {}
    objetivo = {}
    funcoes_preferencia = {}
    parametros_preferencia = {}
    desempenho = {forn: {} for forn in fornecedores_selecionados}
    
    for criterio in criterios_selecionados:
        with st.expander(f"Configura√ß√£o do crit√©rio: {criterio}"):
            st.info(descricao_criterios[criterio])
            
            if criterio in escala_qualitativa:
                st.markdown("**Escala Qualitativa:**")
                st.markdown(escala_qualitativa[criterio])
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                pesos[criterio] = st.number_input(
                    f"Peso do crit√©rio {criterio}",
                    min_value=0.0,
                    value=1.0,
                    step=0.1,
                    key=f"peso_{criterio}"
                )
            
            with col2:
                objetivo[criterio] = st.radio(
                    f"O crit√©rio {criterio} deve ser:",
                    ['Maximizado', 'Minimizado'],
                    index=0 if '‚Üì' not in descricao_criterios[criterio] else 1,
                    horizontal=True,
                    key=f"objetivo_{criterio}"
                )
            
            with col3:
                funcoes_preferencia[criterio] = st.selectbox(
                    f"Fun√ß√£o de prefer√™ncia para {criterio}",
                    ['Usual', 'Quase-crit√©rio', 'Limiar de prefer√™ncia', 
                     'Pseudo-crit√©rio', '√Årea de indiferen√ßa', 'Gaussiana'],
                    key=f"funcao_{criterio}"
                )
            
            # Par√¢metros espec√≠ficos para cada fun√ß√£o
            parametros = {}
            func = funcoes_preferencia[criterio]
            
            if func in ['Quase-crit√©rio', 'Pseudo-crit√©rio', '√Årea de indiferen√ßa']:
                parametros['q'] = st.number_input(
                    f"Limiar de indiferen√ßa (q) para {criterio}",
                    min_value=0.0,
                    value=0.1,
                    step=0.01,
                    key=f"q_{criterio}"
                )
            
            if func in ['Limiar de prefer√™ncia', 'Pseudo-crit√©rio', '√Årea de indiferen√ßa']:
                parametros['p'] = st.number_input(
                    f"Limiar de prefer√™ncia (p) para {criterio}",
                    min_value=0.0,
                    value=0.5,
                    step=0.01,
                    key=f"p_{criterio}"
                )
            
            if func == 'Gaussiana':
                parametros['s'] = st.number_input(
                    f"Par√¢metro s (desvio padr√£o) para {criterio}",
                    min_value=0.01,
                    value=0.5,
                    step=0.01,
                    key=f"s_{criterio}"
                )
            
            parametros_preferencia[criterio] = parametros
            
            # Entrada de desempenho dos fornecedores
            st.markdown("**Avalia√ß√£o dos fornecedores:**")
            
            if criterio in criterios_qualitativos:
                for forn in fornecedores_selecionados:
                    desempenho[forn][criterio] = st.slider(
                        f"{forn} no crit√©rio {criterio} (1-5)",
                        1, 5, 3,
                        key=f"aval_{forn}_{criterio}"
                    )
            else:
                cols = st.columns(len(fornecedores_selecionados))
                for i, forn in enumerate(fornecedores_selecionados):
                    with cols[i]:
                        desempenho[forn][criterio] = st.number_input(
                            f"{forn}",
                            min_value=0.0,
                            step=0.1,
                            key=f"aval_{forn}_{criterio}"
                        )
    
    # Valida√ß√£o dos par√¢metros
    for crit in criterios_selecionados:
        func = funcoes_preferencia[crit]
        params = parametros_preferencia[crit]
        
        if func in ['Pseudo-crit√©rio', '√Årea de indiferen√ßa']:
            if params['p'] <= params['q']:
                st.error(f"Para o crit√©rio {crit}, o limiar de prefer√™ncia (p) deve ser MAIOR que o limiar de indiferen√ßa (q)")
                st.stop()
        
        if func == 'Gaussiana' and params.get('s', 1) <= 0:
            st.error(f"Para o crit√©rio {crit}, o par√¢metro s deve ser POSITIVO")
            st.stop()
    
    # Criar dataframe de desempenho
    df = pd.DataFrame(desempenho).T
    
    # Tabela resumo dos crit√©rios
    st.subheader("Resumo dos Crit√©rios Configurados")
    
    resumo_criterios = pd.DataFrame({
        'Crit√©rio': criterios_selecionados,
        'Objetivo': [objetivo[crit] for crit in criterios_selecionados],
        'Fun√ß√£o Prefer√™ncia': [funcoes_preferencia[crit] for crit in criterios_selecionados],
        'Peso': [pesos[crit] for crit in criterios_selecionados],
        'q (Indiferen√ßa)': [parametros_preferencia[crit].get('q', '-') for crit in criterios_selecionados],
        'p (Prefer√™ncia)': [parametros_preferencia[crit].get('p', '-') for crit in criterios_selecionados],
        's (Gaussiana)': [parametros_preferencia[crit].get('s', '-') for crit in criterios_selecionados]
    })
    
    st.dataframe(resumo_criterios)
    
    # Exibir matriz de desempenho
    st.subheader("Matriz de Desempenho")
    st.dataframe(df.style.background_gradient(cmap='Blues'))
    
    # Bot√£o para calcular
    if st.button("Calcular Ranking PROMETHEE II"):
        with st.spinner("Calculando ranking..."):
            resultado, matriz_d, matriz_pref, pref_agregada = calcular_promethee_sem_normalizar(
                df,
                criterios_selecionados,
                objetivo,
                pesos,
                funcoes_preferencia,
                parametros_preferencia
            )
        
        n = len(resultado)
        
        # Exibir resultados
        st.subheader("Resultados PROMETHEE II")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Ranking Final**")
            st.dataframe(
                resultado.style.format({
                    'Fluxo Positivo (œï+)': "{:.4f}",
                    'Fluxo Negativo (œï-)': "{:.4f}",
                    'Fluxo L√≠quido (œï)': "{:.4f}"
                }).background_gradient(subset=['Fluxo L√≠quido (œï)'], cmap='RdYlGn'
                )
            )
        
        with col2:
            st.markdown("**Rela√ß√µes de Prefer√™ncia**")
            for i in range(len(resultado)):
                a = resultado.iloc[i]['Fornecedor']
                flux_a = resultado.iloc[i]['Fluxo L√≠quido (œï)']
                
                for j in range(i+1, len(resultado)):
                    b = resultado.iloc[j]['Fornecedor']
                    flux_b = resultado.iloc[j]['Fluxo L√≠quido (œï)']
                    
                    if abs(flux_a - flux_b) < 0.0001:  # Considera indiferen√ßa
                        st.write(f"üîπ {a} I {b} (Indiferentes)")
                    elif flux_a > flux_b:
                        st.write(f"‚úÖ {a} P {b} (Prefer√™ncia)")
                    else:
                        st.write(f"‚úÖ {b} P {a} (Prefer√™ncia)")
        
        # Gr√°fico de barras
        st.subheader("Visualiza√ß√£o do Fluxo L√≠quido")
        fig = px.bar(
            resultado,
            x='Fornecedor',
            y='Fluxo L√≠quido (œï)',
            color='Fornecedor',
            title='Ranking PROMETHEE II - Fluxo L√≠quido',
            text='Fluxo L√≠quido (œï)',
            color_discrete_sequence=px.colors.qualitative.Plotly
        )
        fig.update_traces(texttemplate='%{text:.3f}', textposition='outside')
        fig.update_layout(
            yaxis_range=[-1, 1],
            yaxis_title='Fluxo L√≠quido (œï)',
            showlegend=False
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Matriz normalizada
        st.subheader("Matriz de Diferen√ßas d(a,b) por Crit√©rio")
        for crit in criterios_selecionados:
            st.markdown(f"**Crit√©rio: {crit}**")
            df_dif = pd.DataFrame(matriz_d[crit],
                          index=resultado['Fornecedor'],
                          columns=resultado['Fornecedor'])
            st.dataframe(df_dif.style.format("{:.4f}").background_gradient(cmap='PuBu'))

        # Matriz de prefer√™ncia agregada
        st.subheader("Matriz de Prefer√™ncia Agregada")
        df_pref = pd.DataFrame(pref_agregada, 
                               index=resultado['Fornecedor'], 
                               columns=resultado['Fornecedor'])
        st.write("Matriz œÄ(a, b) ‚Äì Grau de prefer√™ncia de a sobre b:")
        st.dataframe(df_pref.style.format("{:.4f}").background_gradient(cmap='Oranges'))

        # Matriz de Fluxo L√≠quido œÄ(a,b) - œÄ(b,a)
        st.subheader("Matriz de Fluxo L√≠quido Final (œï(a,b))")
        fluxo_liquido_matriz = np.zeros((n, n))
        for i in range(n):
            for j in range(n):
                fluxo_liquido_matriz[i][j] = pref_agregada[i][j] - pref_agregada[j][i]
        
        df_fluxo_liquido = pd.DataFrame(fluxo_liquido_matriz, 
                                        index=resultado['Fornecedor'], 
                                        columns=resultado['Fornecedor'])
        st.dataframe(df_fluxo_liquido.style.format("{:.4f}").background_gradient(cmap='RdBu', axis=None))

        st.subheader("Matriz de Diferen√ßas Normalizadas d(a,b) por Crit√©rio")
       
        for crit in criterios_selecionados:
            st.markdown(f"**Crit√©rio: {crit}**")
            pref_crit = np.zeros((n, n))
            for i in range(n):
                for j in range(n):
                    d = df.loc[resultado['Fornecedor'].iloc[i], crit] - df.loc[resultado['Fornecedor'].iloc[j], crit]
                    if objetivo[crit] == 'Minimizado':
                        d = -d

                    q = parametros_preferencia[crit].get('q', 0)
                    p = parametros_preferencia[crit].get('p', 0)
                    s = parametros_preferencia[crit].get('s', 1)
                    func = funcoes_preferencia[crit]

                    if func == 'Usual':
                        pref = 1 if d > 0 else 0
                    elif func == 'Quase-crit√©rio':
                        pref = 1 if d > q else 0
                    elif func == 'Limiar de prefer√™ncia':
                        if d <= 0:
                            pref = 0
                        elif d <= p:
                            pref = d / p
                        else:
                            pref = 1
                    elif func == 'Pseudo-crit√©rio':
                        if d <= q:
                            pref = 0
                        elif d <= p:
                            pref = 0.5
                        else:
                            pref = 1
                    elif func == '√Årea de indiferen√ßa':
                        if d <= q:
                            pref = 0
                        elif d <= p:
                            pref = (d - q) / (p - q)
                        else:
                            pref = 1
                    elif func == 'Gaussiana':
                        pref = 1 - math.exp(-(d ** 2) / (2 * s ** 2)) if d > 0 else 0
                    else:
                        pref = 0

                    pref_crit[i][j] = pref

        # Cria e exibe o DataFrame dentro do loop para cada crit√©rio
        df_pi = pd.DataFrame(pref_crit,
                         index=resultado['Fornecedor'],
                         columns=resultado['Fornecedor'])
        st.dataframe(df_pi.style.format("{:.4f}").background_gradient(cmap='OrRd'))

# ===================================
# Roteamento entre telas
# ===================================
def main():
    menu = ["Tela Inicial", "Sistema PROMETHEE II"]
    escolha = st.sidebar.selectbox("Menu", menu)
    
    if escolha == "Tela Inicial":
        tela_inicial()
    elif escolha == "Sistema PROMETHEE II":
        tela_sistema()

if __name__ == "__main__":
    main()